#############################################################################
# Default syslog-ng.conf file which collects all local logs into a
# single file called /var/log/messages tailored to container usage.
#
# The changes from the stock, default syslog-ng.conf file is that we've
# dropped the system() source that is not needed and that we enabled network
# connections using default-network-drivers(). Customize as needed and
# override using the -v option to docker, such as:
#
#  docker run ...  -v "$PWD/syslog-ng.conf":/etc/syslog-ng/syslog-ng.conf
#

@version: "4.8"
@include "scl.conf"

options {
  chain_hostnames(on);
  flush_lines(0);
  use_dns(persist_only);
  use_fqdn(yes);
  perm(0640);
	dir-perm(0750);
  stats(freq(0));
  bad_hostname("^gconfd$");
  normalize_hostnames(yes);
  keep_hostname(yes);
};

source s_local {
	internal();
};

source s_network {
	default-network-drivers(
		# NOTE: TLS support
		#
		# the default-network-drivers() source driver opens the TLS
		# enabled ports as well, however without an actual key/cert
		# pair they will not operate and syslog-ng would display a
		# warning at startup.
		#
		#tls(key-file("/path/to/ssl-private-key") cert-file("/path/to/ssl-cert"))
                tcp-port(1514)
                udp-port(1514)
                keep_hostname(yes)
	);
};

destination d_datadog {
	http(
		url("https://http-intake.logs.datadoghq.com/api/v2/logs?ddsource=syslog&ddtags=env:{{ datadog_env | default('home') }},region:{{ datadog_region | default('unknown') }}")
		method("POST")
		headers("Content-Type: application/json", "Accept: application/json", "DD-API-KEY: {{ my_datadog_api_key }}")
		body("$(format-json --scope rfc5424 --scope nv-pairs --key DDMESSAGE --rekey DDMESSAGE.message)")
		disk-buffer(
			mem-buf-size(163840)
			disk-buf-size(256MB)
			reliable(yes)
			dir("/var/log/syslog-ng-disk-buffer")
		)
	);
};

destination d_fallback_local {
	file("/var/log/failed-datadog/${HOST}/${YEAR}_${MONTH}_${DAY}-fallback.log" 
		create-dirs(yes) 
		template("$ISODATE $HOST $PROGRAM: $MESSAGE\n")
	);
};

log {
	source(s_local);
	source(s_network);
	destination(d_datadog);
	destination(d_fallback_local);
	flags(fallback);
};
